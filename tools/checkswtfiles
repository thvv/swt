#!/bin/sh
# check SWT for missing files
#
# USAGE: checkswtfiles -preconfig
## ---- called by install-swt/configure
# USAGE: checkswtfiles -preinstall
## ---- called by install-swt/install
# USAGE: checkswtfiles -prerun livedir
## ---- called by swtfunct.sh::initialsetup() before execution
##
# THVV 01/15/16
# THVV 09/10/20 update for expandfile3
# THVV 02/28/21 rename to checkswtfiles, clean up, fix args
# THVV 03/18/21 add tarfile-manifest.e to install-needs
# THVV 03/26/21 adjust list of templates to match swt.sql
# THVV 04/08/21 remove filetypepie.htmt and pienumberfile, obsolete
# THVV 06/11/21 expandfile3 => expandfile
# ----------------------------------------------------------------
# checks dirs
#  SWTDIR          htmx files and sql files
#  SWTDIR/tools    tools files
#  CONFIGDIR       templates for configure
#  RUNTIMEDIR      files for viewing HTML report (live/ for configure/install, runtimedir/ for wtx, $HOME/pub/wt/ for pair)
# ----------------------------------------------------------------
nfiles=0
SWTDIR=`pwd`			# does not have trailing slash
RUNTIMEDIR=""			# only for -prerun
CONFIGDIR=""
FUNCTION=$1
shift

# $1 is the /live dir path, if supplied .. but we assume it is live/ for configure and install
if [ "$FUNCTION" = "" ] ; then
    echo "USAGE: cd SWTDIR; sh checkswtfiles -preconfig|-preinstall|-prerun RUNTIMEDIR"
    exit 1
elif [ "$FUNCTION" = "-preconfig" ] ; then
    CONFIGDIR=$SWTDIR
    RUNTIMEDIR="live/"
elif [ "$FUNCTION" = "-preinstall" ] ; then
    RUNTIMEDIR="live/"
elif [ "$FUNCTION" = "-prerun" ] ; then
    RUNTIMEDIR=$1
    RUNTIMEDIR="$RUNTIMEDIR"/		# ensure one trailing slash
    RUNTIMEDIR=`echo $RUNTIMEDIR | sed -e 's://$:/:'`
    if [ ! -d $RUNTIMEDIR ] ; then
	echo "$0: error: $RUNTIMEDIR not a directory"
	exit 1
    fi
else
    echo "USAGE: sh checkswtfiles -preconfig|-preinstall|-prerun RUNTIMEDIR"
    exit 1  
fi

filepresent()
{
    local thing=""
    thing="$1"
    thing=`echo $thing | sed -E -e 's:/+:/:g'`
    echo "..checking $thing"
    nfiles=`echo "$nfiles + 1" | bc`
    test -e "$thing" || test -L "$thing" || export BAD="$BAD $thing" # allow files or links
}
checkalist()
{
    local a_pfx=""
    a_pfx="$1/"
    local a_list=""
    a_list="$2"
    for i in $a_list
    do
	filepresent $a_pfx$i
    done
}

templates=" accesstime.htmt analysis.htmt attacks.htmt byyear.htmt config.htmt cumdom.htmt cumpage.htmt dashcsv.htmt diskmontpt.htmt domain1.htmt domainlevel.htmt dslvhist.htmt duration.htmt filelist.htmt filesize.htmt filetype1.htmt geoloc.htmt ggq.htmt globalconfig.htmt globalqueries.htmt google.htmt heading.htmt histo2n.htmt histo3n1.htmt histo3nn1.htmt illref.htmt important7dayhead.htmt importanthead.htmt importanttail.htmt importantwrapper.htmt info.htmt localquery.htmt longshort.htmt monthsum.htmt navlinks.htmt optdoc.htmt paths1.htmt pathsql.htmt piecharts.htmt queries.htmt referrer.htmt repeat.htmt report403.htmt retcodetable.htmt tail.htmt todayline.htmt verbtable.htmt vhisto.htmt visitdetailhead.htmt visitsbycount.htmt wtxmacros.htmi yquery.htmt yreferrer.htmt ywords.htmt"

parts=" configdisplay.htmx swt swt.sql swtfunct.sh wtxmacros.htmi"

toolsfiles="expandfile expandfile.pm readbindsql.pm readbindxml.pm checkswtfiles combinelogs expandfile_config logmerge logvisits3.pl mys mysqlrun mysqlload mysqldumpcum printvisitdetail3.pl readapacheline.pm thvvutil3.pm visitdata3.pl wordlist3.pl"

config_templates=" combinelogs.conf configure CONFIGURE.swtconfig.htmi.tpt CONFIGURE.sqlcnf.tpt CONFIGURE.oldmys.tpt CONFIGURE.oldmysqldumpcum.tpt CONFIGURE.oldmysqlload.tpt CONFIGURE.oldmysqlrun.tpt CONFIGURE.mys.tpt CONFIGURE.mysqldumpcum.tpt CONFIGURE.mysqlload.tpt CONFIGURE.swt-user-sql.tpt CONFIGURE.check-tables.tpt CONFIGURE.mysqlrun.tpt CONFIGURE.cronjob.tpt CONFIGURE.combining-cronjob.tpt CONFIGURE.combinelogs-conf.tpt filecleanupsh.tpt install tablecleanupsql.tpt"

config_results="swt-user.sql mys mysqlrun mysqlload mysqldumpcum sql.cnf sqlx.cnf"

install_needs="init_wtcumfile.sql init_wtcumgoog.sql init_wtcumpath.sql init_wtcumquery.sql init_wtcumref.sql init_wtdayhist.sql init_wtdomhist.sql init_wtlog.sql init_wtsrhist.sql tarfile-manifest.e"

runtimefiles="blackpix.gif bluepix.gif cyanpix.gif darkbluepix.gif fuchsiapix.gif goldenrodpix.gif graypix.gif greenpix.gif indigopix.gif lightgreenpix.gif limepix.gif maroonpix.gif navypix.gif olivepix.gif orangepix.gif pinkpix.gif purplepix.gif redpix.gif silverpix.gif tealpix.gif violetpix.gif whitepix.gif yellowpix.gif swt.js piecanvas.js excanvas.js swtstyle.css"

# generated by configure: preamble.txt postamble.txt vnfile swt-user.sql
# basic machinery:  swt swt.sql swtfunct.sh wtxmacros.htmi

# files not to check, generated each time we run:
#   runsteptemp.sql log2db.sql visits.sql tempwords.sql todayline.sql temppath.sql load_wtsrhist.sql temp.sql wtlog.sql
#   today.log wtglobalvalues.sh cumdump.sql.gz globalqueries.htmt wtglobals.sh navbar.htmi swtdash.csv load_wtsrhist_sep.txt longtemp shorttemp important.* paths.dot temp.sh
#

# ----------------------------------------------------------------
export BAD=""

#.. check report template files in SWTDIR always .. list from swt.sql reportoptions
checkalist "$SWTDIR" "$templates"

#.. check parts files in SWTDIR always
checkalist "$SWTDIR" "$parts"

#.. check /tools files always
checkalist "$SWTDIR/tools/" "$toolsfiles"

# .. for -preconfig, check config tpts before expanding
if [ "$CONFIGDIR" != "" ] ; then
    #.. check configure machinery
    checkalist "$CONFIGDIR" "$config_templates"
fi

# .. for -preinstall, check configure results and intialization .sql files
if [ "$FUNCTION" = "-preinstall" ] ; then
    #.. check that configure worked
    checkalist "$CONFIGDIR" "$config_results"
    #.. check install machinery
    checkalist "$CONFIGDIR" "$install_needs"
fi

# .. check runtime gifs etc
if [ "$RUNTIMEDIR" != "" ] ; then
    #.. check /runtimedir files .. if run by swtfunct, this is the path for the live dir
    echo "checking $RUNTIMEDIR"
    checkalist "$RUNTIMEDIR/" "$runtimefiles"
fi

# ----------------------------------------------------------------
#.. check that necessary executable files exist somewhere and are executable

binfiles=" perl rsync ssh touch chmod cp cat ls echo mv sed ed gzip"
binfiles2=" expandfile logmerge logextractor2 combinelogs fmtnum filemodshort filesizek filedaysold"

onsearchpath()
{
    local thing=""
    thing="$1"
    export fp=`which $thing`
    if test -z "$fp"
    then
       export BAD="$BAD $thing"
    fi
}

#.. check search path
export BAD=""
for i in $binfiles
do
    onsearchpath $i
done

# ----------------------------------------------------------------
# check that Perl modules needed for expandfile are somewhere in PERL5LIB
# .. calls 'perldoc -lm MODULE' to check the module name
# these names are baked into expandfile's parts and logextractor2
#
# these checks are warning only
# ----------------------------------------------------------------

cpan_mods="LWP::Simple Term::ANSIColor DBI DBD::mysql XML::LibXML XML::Simple expandfile.pm readbindsql.pm readbindxml.pm readapacheline.pm"

BADMOD=""
for j in $cpan_mods
do
    # echo "..checking $j"
    zz=`perldoc -lm $j | sed 's/^No module.*$//'`
    if [ "$zz" = "" ] ; then
	export BADMOD="$BADMOD $j"
    fi
done
if test ! -z "$BADMOD"
then
    echo "$0: warning: Perl modules not in PERL5LIB: $BADMOD" >&2
    # keep going, PERL5LIB may not have a colon and the system lib in it, still works
fi

# not testing for GeoIP2::Database::Reader MaxMind::DB::Reader::XS
# not verifying libmaxminddb (get from https://github.com/maxmind/libmaxminddb)
# .. on the Mac, it is in /usr/local/lib/ libmaxminddb.la libmaxminddb.a libmaxminddb.0.dylib libmaxminddb.dylib
# .. on FreeBSD, it is in /usr/local/lib/ libmaxminddb.a libmaxminddb.so libmaxminddb.so.0.0.7 libmaxminddb.la libmaxminddb.so.0

# ----------------------------------------------------------------
# complain if anything was missing and return nonzero errcode
# ----------------------------------------------------------------
echo "$0: checked $nfiles files."
if test ! -z "$BAD"
then
    { echo "$0: missing files: $BAD" >&2
      { (exit 2); exit 2; }; }
fi

# end
