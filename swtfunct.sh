#!/bin/sh
#################################################################
# Functions for Super Webtrax
# 2006-2021, Tom Van Vleck
# THVV 08/27/06
# THVV 08/28/06 work around incompatible sh bug in FreeBSD
# THVV 09/21/06 Change globalqueries to create globalqueries.htmt on the fly from SQL
# THVV 11/07/06 If logfile is not defined, do not define log query
# THVV 11/20/06 Add function to trim a table
# THVV 01/10/07 Invoke Perl programs via perl command
# THVV 01/15/07 check for existence of files before starting
# THVV 02/04/07 add wtsrhist.sql handling
# THVV 02/05/07 machinery for cleanup of temp tables and files
# THVV 02/08/07 change config file from text to htmi
# THVV 02/20/07 add configdisplay.html
# THVV 09/10/07 remove dep on thvvutil.pm
# THVV 09/20/07 Separate init_wtsrhist
# THVV 02/27/08 Create runstep table, add a line to it for each report, die if DB is down.
# THVV 08/11/08 Do not require globalqueries.htmt in initialsetup()
# THVV 08/12/08 define criteria for printing log entries
# THVV 08/14/08 refine criteria for printing particular hits
# THVV 07/31/14 include SET SESSION sql_mode=''; when updating wtsrhist
# THVV 02/25/15 fix updating of runstep, NULL no longer means NOW()
# THVV 06/26/15 check for preamble.txt and postamble.txt, headingrep will fail otherwise
# THVV 03/29/16 allow additional query for deleting junk Apache hits
# THVV 11/09/20 expandfile3
# THVV 03/01/21 improve checks for required files; use checkswtfiles
#################################################################
### Initial setup
#   1. Load configuration from swt.sql and swt-user.sql into the database.
#   2. Export configuration data from the database into the shell environment.
initialsetup ()
{
    export BAD=""
    local a1="$1" # swtconfig.htmi
    local a2="$2" # swt.sql
    local a3="$3" # swt-user.sql
    local a4="$4" # wtglobalvalues.sh -- created
    local a5="$5" # globalconfig.htmt
        
    # Establish a minimum set of data items, enough to load the real config from SQL.  this sets _xf_hostname,_xf_database,_xf_username,_xf_password,_xf_debug and must match sql.cnf
    export CONFIGFILE=$a1
    if [ ! -f $CONFIGFILE ] ; then
	echo "$0: ***** error: CONFIGFILE $CONFIGFILE missing"
	exit 1
    fi
    # .. prefix commands with this command .. these values can be overridden by swt.sql once we load it
    export COMMANDPREFIX="nice"
    # .. these paths are relative to PROGRAMDIR
    # .. name of template expander, should be on your PATH, as should thvve.pm, readapacheline.pm (could check)
    export EXPAND="./tools/expandfile"
    # .. script to load a file into MySQL, should be in tools, mode 500
    export MYSQLLOAD="./tools/mysqlload"
    # .. script to run a command in MySQL, should be in tools, mode 500
    export MYSQLRUN="./tools/mysqlrun"
    # .. script to dump tables from MySQL, should be in tools, mode 500
    export MYSQLDUMPCUM="./tools/mysqldumpcum"
    #
    ### MYSQLLOAD and MYSQLRUN must agree with CONFIGFILE .. ensure that we can change databases.
    
    ### See if MySQL is installed
    MYSQLPATH=`which mysql`
    if [ "$MYSQLPATH" = "" ] ; then
    	echo "$0: ***** error: mysql command not found"
    	exit 127
    fi
    ## .. See if we have the correct database server and password, and MySQL running
    echo "quit" > runsteptemp.sql
    $COMMANDPREFIX $MYSQLLOAD runsteptemp.sql
    errorwas=$?
    if [ "$errorwas" != "0" ] ; then
    	echo "$0: ***** error: unable to execute mysql commands, check DB server in $a1"
    	exit 127
    fi
    ### Create the runstep table and write the first entry into it.
    echo "DROP TABLE IF EXISTS runstep;" > runsteptemp.sql
    echo "CREATE TABLE runstep(" >> runsteptemp.sql
    echo " steptime TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP()," >> runsteptemp.sql
    echo " steptext VARCHAR(255)" >> runsteptemp.sql
    echo ");" >> runsteptemp.sql
    echo "INSERT INTO runstep VALUES(NOW(),'start');" >> runsteptemp.sql
    ## .. check if we have write access to the database
    $COMMANDPREFIX $MYSQLLOAD runsteptemp.sql
    errorwas=$?
    if [ "$errorwas" != "0" ] ; then
    	echo "$0: ***** error: unable to create runstep table in MySQL"
    	exit 127
    fi
    # TODO check for existence of required tables using CONFIGURE.check-tables.sql generated by configure

    ### load configuration data into MySQL from text files. Load swt.sql first, SWT configuration same for all users.
    if [ ! -f $a2 ] ; then	# swt.sql
	echo "$0:  ***** error: $a2 missing"
	exit 1
    fi
    $COMMANDPREFIX $MYSQLLOAD $a2 # swt.sql
    errorwas=$?
    if [ "$errorwas" != "0" ] ; then
       echo 1>&2 "$0: **** failed: $MYSQLLOAD $a2"
       exit 127
    fi
    ### load in the user configuration, swt-user.sql, contains local config values and may augment or override.
    if [ ! -f $a3 ] ; then	# swt-user.sql
	echo "$0: ***** error: $a3 missing"
	exit 1
    fi
    $COMMANDPREFIX $MYSQLLOAD $a3 # swt-user.sql
    errorwas=$?
    if [ "$errorwas" != "0" ] ; then
       echo 1>&2 "$0: **** failed: $MYSQLLOAD $a3"
       exit 127
    fi
    ### Generate a set of shell export commands from the SQL tables.  Shell scripts and expandfile can use these.
    if [ ! -f $a5 ] ; then	# globalconfig.htmt -- template that expands queries
	echo "$0: ***** error: $a5 missing"
	exit 1
    fi
    export qglobalconfig1='SELECT * FROM wtglobalvalues'
    export qglobalconfig2='SELECT * FROM wtreports INNER JOIN wtreportoptions ON reportid = optid'
    rm -f $a4
    echo $EXPAND $CONFIGFILE $a5
    $COMMANDPREFIX $EXPAND $CONFIGFILE $a5 > $a4 # expand globalconfig.htmt, which makes a shell script from wtglobalvalues
    # Load the exports into the shell environment.  This sets config values where shell can expand them.
    if [ -s ./$a4 ] ; then
       . ./$a4
    else
       echo 1>&2 "$0: **** error: Missing (or empty): ./$a4"
       exit 127
    fi
    ### did it work?  (ECHO and wtversion should be set if it worked)
    if [ "$wtversion" != "" ] ; then
	$ECHO "Configuration loaded `date`, webtrax version $wtversion"
    else
       echo 1>&2 "$0: **** error: 'wtversion' was not set by loading configuration"
       exit 127
    fi
    
    # check that required files are present
    if [ "$CHECKSWTFILES" = "" ] ; then
    	echo "$0: ***** error: CHECKSWTFILES is not defined"
    	exit 127	
    fi
    if [ ! -e $CHECKSWTFILES ] ; then
    	echo "$0: ***** error: $CHECKSWTFILES is missing"
    	exit 127	
    fi
    if [ "$REPORTDIR" = "" ] ; then # directory where HTML report is stored
    	echo "$0: ***** error: REPORTDIR is not defined"
    	exit 127	
    fi
    if [ ! -d $REPORTDIR ] ; then
    	echo "$0: ***** error: directory $REPORTDIR is missing"
    	exit 127	
    fi
    $COMMANDPREFIX $CHECKSWTFILES -prerun $REPORTDIR
    errorwas=$?
    if [ "$errorwas" != "0" ] ; then
       echo 1>&2 "$0: ***** failed: tools/checkswtfiles -prerun $REPORTDIR"
       exit 127
    fi
    # prints one line saying how many files were checked, lists missing files if failed.    
}
#################################################################
### Utility: log a line to runstep. 
# .. die if the database server has gone down
logrunstep ()
{
    local a1="$1" # message
    $COMMANDPREFIX $MYSQLRUN "INSERT INTO runstep VALUES(NOW(),'$a1')"
    errorwas=$?
    if [ "$errorwas" != "0" ] ; then
  	echo "$0: ***** error: unable to INSERT INTO runstep, check DB server"
   	exit 126
    fi
}
#################################################################
### Change to the official directory and save the cumulative tables from the database into a file.
init_wtsrhist ()
{
    cd $DATADIR
    # Initialize the sql file that will load the per-report notes. Use "echo" not $ECHO for file writing.
    echo "SET SESSION sql_mode=''; INSERT INTO wtsrhist VALUES" > load_wtsrhist.sql
    echo "" > load_wtsrhist_sep.txt
    # various reports will append to this file
}
#################################################################
### Change to the official directory and save the cumulative tables from the database into a file.
savedatabase ()
{
    cd $DATADIR
    $ECHO $COMMANDPREFIX $MYSQLDUMPCUM $DATABASE
    $COMMANDPREFIX $MYSQLDUMPCUM $DATABASE
    errorwas=$?
    # if we get "mysqldump: Error 2013: Lost connection to MySQL server during query when dumping table wtdomhist at row: 39401"
    # .. the errorcode is 0 and we do not fail.  This sucks.
    if [ "$errorwas" != "0" ] ; then
       echo 1>&2 "$0: **** failed: $MYSQLDUMPCUM"
       exit 127
    fi
}
#################################################################
### Load usage data into the SQL database.  Populate the visits table.
loadusage()
{
    local a1="$1" # arg to the including script
    local a2="$2" # $DATADIR/log2db.sql
    local a3="$3" # $DATADIR/visits.sql
    local a4="$4"
    local a5="$5"
    local a6="$6"
    ### load the data
    $ECHO "load data"
    # load an Apache log file into MySQL in the "hits" table (deleting old one) and create "hitslices" table
    if [ -s $CONFIGFILE ] ; then
	rm -f $a2
	# logvisits does not write the database, only reads config tables 'wtpredomain','wtprepath','wtprereferrer' that came from swt.sql
	$ECHO $LOGVISITS -sql -config $CONFIGFILE $a1
	$COMMANDPREFIX $LOGVISITS -sql -config $CONFIGFILE $a1 > $a2
	errorwas=$?
	# no errcode for DBI connect('thvv_s:db82b.pair.com','thvv_2',...) failed: Can't connect to MySQL server on 'db82b.pair.com' (61) at /usr/home/thvv/wtx/logvisits.pl line 106
	if [ "$errorwas" != "0" ] ; then
	    echo 1>&2 "$0: **** failed: $LOGVISITS -sql -config $CONFIGFILE $1"
	    exit 127
	fi
	# .. mysqlload has "--defaults-file=sql.cnf" which specifies the host,database,user,password
	$ECHO $MYSQLLOAD $a2
	$COMMANDPREFIX $MYSQLLOAD $a2 # log2db.sql
	errorwas=$?
	# we do get an errcode on ERROR 2003 (HY000): Can't connect to MySQL server on 'db82b.pair.com' (61)
	if [ "$errorwas" != "0" ] ; then
	    echo 1>&2 "$0: **** failed: $MYSQLLOAD $a2 ($errorwas)"
	    exit 127
	fi
	$CLEANUP $a2
    else
	echo 1>&2 "$0: **** Missing: $CONFIGFILE"
	exit 127
    fi
    # Run a post-hit-loading query to kill junk, e.g. internal Apache hits
    # .. fetch query "q2" from report config for "clean_hits"
    local x
    local z
    x=`$MYSQLRUN "SELECT qvalue FROM wtqueries WHERE qrpt='clean_hits' AND qname='q2'"`
    # .. the query may have free variables that need to be bound
    eval z=\"$x\"
    if [ ! -z "$z" ] ; then
	# .. yields DELETE FROM hits WHERE domain="::1" AND verb = 'OPTIONS'
	$ECHO "Cleaning: $z `pwd`"
	$COMMANDPREFIX $MYSQLRUN "$z"
	errorwas=$?
	if [ "$errorwas" != "0" ] ; then
	    echo 1>&2 "$0: **** failed: $MYSQLRUN $z"
	    exit 127
	fi
    fi
    # Run the post-hit-loading query to kill referrer spam
    # .. fetch query "q" from report config for "clean_hits"
    x=""
    z=""
    x=`$MYSQLRUN "SELECT qvalue FROM wtqueries WHERE qrpt='clean_hits' AND qname='q'"`
    eval z=\"$x\"
    # .. yields UPDATE hits SET referrerurl = '' WHERE browser LIKE '%pycurl%' and verb = 'GET'
    $ECHO "Cleaning: $z `pwd`"
    $COMMANDPREFIX $MYSQLRUN "$z"
    errorwas=$?
    if [ "$errorwas" != "0" ] ; then
       echo 1>&2 "$0: **** failed: $MYSQLRUN $z"
       exit 127
    fi
    # create and load the visits table from the hits table.
    # .. note that we take "wtretcodes.good != 0" here so this includes displayable errors like 404s but not other errors
    # get the query from swt.sql in case we need to change it
    #export visitdata_vq="SELECT $star FROM hits INNER JOIN wtretcodes ON hits.retcode = wtretcodes.code LEFT OUTER JOIN wtsuffixclass ON hits.filetype = wtsuffixclass.suf WHERE vn >= %[sllo]% AND vn <= %[slhi]% AND wtretcodes.good != 0 ORDER BY hits.vn, hits.sn"
    #
    # following code is finicky:
    # .. mysqlrun includes --silent --skip-column-names so the result will be one line.
    # .. mysqlrun might return a string containing $star. (avoid shell iterator)
    # .. FreeBSD sh gives an error on local x= whatever, but this form works.
    # .. the eval expands the star or other shell variable refs set by the globals.
    local star="*"
    local x
    local z
    x=`$MYSQLRUN "SELECT qvalue FROM wtqueries WHERE qrpt='visitdata' AND qname='vq'"`
    # SELECT $star
    #  FROM hits INNER JOIN wtretcodes ON hits.retcode = wtretcodes.code LEFT OUTER JOIN wtsuffixclass ON hits.filetype = wtsuffixclass.suf
    #  WHERE vn >= %[sllo]% AND vn <= %[slhi]% AND wtretcodes.good != 0
    #  ORDER BY hits.vn, hits.sn
    eval z=\"$x\"
    export visitdata_vq="$z"
    # .. visitdata_vq has percent refs to sllo and slhi which will be expanded by visitdata.pl for each tranche of the input file
    if [ -s $CONFIGFILE ] ; then
	rm -f $a3
	# visitdata.pl reads "hits" and "hitslices" and outputs a file to load "visits"
	# .. it also loads config tables 'wtlocalreferrerregexp','wtrobotdomains','wtheadpages','wtindexers','wtpclasses' that came from from swt.sql
	$ECHO $VISITDATA -config $CONFIGFILE
	$COMMANDPREFIX $VISITDATA -config $CONFIGFILE > $a3
	errorwas=$?
	if [ "$errorwas" != "0" ] ; then
	    echo 1>&2 "$0: **** failed: $VISITDATA -config $CONFIGFILE"
	    exit 127
	fi
	$ECHO $MYSQLLOAD $a3
	$COMMANDPREFIX $MYSQLLOAD $a3 # visits.sql
	errorwas=$?
	if [ "$errorwas" != "0" ] ; then
	    echo 1>&2 "$0: **** failed: $MYSQLLOAD $a3"
	    exit 127
	fi
	$CLEANUP $a3
    else
	echo 1>&2 "$0: **** Missing: $CONFIGFILE"
	exit 127
    fi
    # visits table is loaded, check if all visit classes are defined.
    x=`$MYSQLRUN "SELECT visitclass FROM visits LEFT OUTER JOIN wtvclasses ON visitclass = vclass WHERE vclass IS NULL GROUP BY visitclass"`
    if [ "$x" != "" ] ; then
	echo "$0: **** warning: undefined visit classes: $x"
	# could insert them into wtvclasses with a redpix.gif
    fi
    # update the query words tables, cumulative and per-day
    $ECHO $WORDLIST -config $CONFIGFILE wtyquerywords
    $COMMANDPREFIX $WORDLIST -config $CONFIGFILE wtyquerywords > tempwords.sql
    errorwas=$?
    if [ "$errorwas" != "0" ] ; then
	echo 1>&2 "$0: **** failed: $WORDLIST -config $CONFIGFILE wtyquerywords"
	exit 127
    fi
    $ECHO $MYSQLLOAD tempwords.sql
    $COMMANDPREFIX $MYSQLLOAD tempwords.sql
    errorwas=$?
    if [ "$errorwas" != "0" ] ; then
	echo 1>&2 "$0: **** failed: $MYSQLLOAD tempwords.sql for wtyquerywords"
	exit 127
    fi
    echo "DROP TABLE IF EXISTS wtdquerywords;" > tempwords.sql
    echo "CREATE TABLE wtdquerywords (word VARCHAR(255) PRIMARY KEY, wcount INT);" >> tempwords.sql
    $COMMANDPREFIX $WORDLIST -config $CONFIGFILE wtdquerywords >> tempwords.sql
    errorwas=$?
    if [ "$errorwas" != "0" ] ; then
	echo 1>&2 "$0: **** failed: $WORDLIST -config $CONFIGFILE wtdquerywords"
	exit 127
    fi
    $COMMANDPREFIX $MYSQLLOAD tempwords.sql
    errorwas=$?
    if [ "$errorwas" != "0" ] ; then
	echo 1>&2 "$0: **** failed: $MYSQLLOAD tempwords.sql for wtdquerywords"
	exit 127
    fi
}
#################################################################
### Query the SQL database for summary totals, used by later reports.
#   Queries are obtained from the database.
#   Results are exported into the shell environment so expandfile can see them.
globalqueries()
{
    local a1="$1" # wtglobals.sh -- to be created by globalqueries.sh, then deleted
    local a2="$2" # ggq.htmt
    local a3="$3" # globalqueries.htmt -- to be created by ggq.htmt, then deleted
    logrunstep "globalqueries"
    # Create globalqueries.htmt from the SQL database.  Table "wtglobvar" lists the vars and their queries.  "ggq.htmt" generates a query for each.
    $COMMANDPREFIX $EXPAND $CONFIGFILE $a2 > ./$a3
    if [ ! -s ./$a3 ] ; then
       echo 1>&2 "$0: **** Missing: ./$a3"
       exit 127
    fi
    # newly created "globalqueries.htmt" creates wtglobals.sh from the SQL database.
    $COMMANDPREFIX $EXPAND $CONFIGFILE $a3 > ./$a1
    # Load the global totals generated by the queries into the shell environment.
    if [ -s ./$a1 ] ; then
       . ./$a1
    else
       echo 1>&2 "$0: **** Missing: ./$a1"
       exit 127
    fi
    $ECHO "----------------------------------------------------------------"
    $ECHO "$firstdate to $lastdate: $totalhits hits, $totalvisits visits, $totalkb KB "
    $ECHO "----------------------------------------------------------------"
    $CLEANUP $a1
    $CLEANUP $a3
}
#################################################################
### Add a row to wtdayhist.
#   .. all the queries were done in globalqueries.htmt
#   .. sets the value "duplicateday" if this day has been seen before.
updatewtdayhist()
{
    local a1="$1" # $DATADIR/todayline.sql
    local a2="$2" # $PROGRAMDIR/todayline.htmt
    export duplicateday="false"
    logrunstep "updatewtdayhist"
    # Generate an insert command for the row.
    rm -f $a1
    # There is no query needed for this operation.
    $COMMANDPREFIX $EXPAND $CONFIGFILE $a2 > $a1 # expand todayline.htmt to make a SQL INSERT
    # Run the insert.
    $COMMANDPREFIX $MYSQLLOAD $a1
    # If the same day is re-run, generates a Duplicate Key error, causing a warning.
    errorwas=$?
    if [ "$errorwas" != "0" ] ; then
       echo 1>&2 "$0: **** warning: $MYSQLLOAD $a1, assuming duplicate key, will skip loading files"
       export duplicateday="true"
    fi
    # keep on generating the report, just don't mess up the cumulative numbers
    $CLEANUP $a1
}
#################################################################
### Write head, title, etc for output reports.
headingrep()
{
    local a1="$1" # reportid
    local a2="$2" # comment
    local a3="$3" # $PROGRAMDIR/navlinks.htmt
    local a4="$4" # navbar.htmi
    local a5="$5" # $OUTPUTFILE
    local a6="$6" # $PROGRAMDIR/importanthead.htmt
    local a7="$7" # $IMPORTANTFILE
    $ECHO $a2
    export nameanchor="$a1"
    logrunstep "headingrep"
    # write nav bar
    $COMMANDPREFIX $EXPAND $CONFIGFILE $a3 > $a4
    # template file name was defined by wtglobalvalues.sh
    htmtfile="${nameanchor}_template"
    eval htmtfile=\$$htmtfile
    rm -f $OUTPUTFILE $IMPORTANTFILE
    #$COMMANDPREFIX $EXPAND $CONFIGFILE $PROGRAMDIR/webtraxhead.htmt > $a5
    #$COMMANDPREFIX $EXPAND $CONFIGFILE $PROGRAMDIR/$htmtfile > $a5
# XXX these names should be params
    $COMMANDPREFIX $EXPAND $CONFIGFILE $PROGRAMDIR/heading.htmt > $a5 # write the main report heading into swtreport.html
    $COMMANDPREFIX $EXPAND $CONFIGFILE $PROGRAMDIR/info.htmt > info.html
    $COMMANDPREFIX $EXPAND $CONFIGFILE $PROGRAMDIR/configdisplay.htmx > configdisplay.html
    # write head matter for important report
    $COMMANDPREFIX $EXPAND $CONFIGFILE $a6 > $a7
}
#################################################################
### Append one report section to the output report.
sectionrep()
{
    local a1="$1" # reportid
    local a2="$2" # Comment that is printed out
    local a3="$3" # Chart title
    local a4="$4" # Subtitle
    local a5="$5" # Output file
    local a6="$6"
    #
    export nameanchor="$a1"
    local enabled="${a1}_enabled"
    eval enabled=\$$enabled
    local htmtfile="${a1}_template"
    eval htmtfile=\$$htmtfile
    local topf="${a1}_top"
    eval topf=\$$topf
    if [ "$topf" != "" ] ; then
      export topn=", top $topf"
      export limitn="LIMIT $topf"
    else
      export topn=""
      export limitn=""
    fi
    if [ "$enabled" = "y" ] ; then
      $ECHO "$a2"
      logrunstep "$a2"
      export REPORTNO=`expr $REPORTNO + 1`
      export charttitle="$REPORTNO. $a3$topn"
      export subtitle="$a4"
      $COMMANDPREFIX $EXPAND $CONFIGFILE $PROGRAMDIR/$htmtfile >> $a5
    fi
}
#################################################################
### Append pie chart invocations to short and long output files.
pierep()
{
    local a1="$1" # reportid
    local a2="$2" # comment
    local a3="$3" # charttitle
    local a4="$4" # longtitle
    local a5="$5" # longtemp
    local a6="$6" # shorttemp
    #
    export nameanchor="$a1"
    local enabled="${a1}_enabled"
    eval enabled=\$$enabled
    local htmtfile="${a1}_template"
    eval htmtfile=\$$htmtfile
    local inshort="${a1}_inshort"
    eval inshort=\$$inshort
    if [ "$enabled" = "y" ] ; then
      $ECHO "$a2"
      logrunstep "$a2"
      export charttitle="$a3"
      export longtitle="$a4"
      $COMMANDPREFIX $EXPAND $CONFIGFILE $PROGRAMDIR/$htmtfile >> $a5
      if [ "$inshort" = "y" ] ; then
	$COMMANDPREFIX $EXPAND $CONFIGFILE $PROGRAMDIR/$htmtfile >> $a6
      fi
    fi
}
#################################################################
### Load optional event log from text file into SQL.
#   ... this file needs a final semicolon
#   ... if the file is written directly to the database then do nothing
loadeventlog()
{
    if [ "$rpt_details_eventlogfile" != "" ] ; then
	if [ "$rpt_details_eventlogfile" != "online" ] ; then
	    if [ -s $rpt_details_eventlogfile ] ; then
		cp $rpt_details_eventlogfile $DATADIR/temp.sql
		echo ";" >> $DATADIR/temp.sql
		$COMMANDPREFIX $MYSQLLOAD $DATADIR/temp.sql
		errorwas=$?
		if [ "$errorwas" != "0" ] ; then
		    echo 1>&2 "$0: **** failed: $MYSQLLOAD $rpt_details_eventlogfile"
		    exit 127
		fi
		$CLEANUP $DATADIR/temp.sql
	    else
		echo 1>&2 "$0: **** Warning: Missing: $rpt_details_eventlogfile"
	    fi
            # else no logfile, OK
	fi
    fi
}
#################################################################
### visit details report section, and important details report
detailsrep()
{
    local a1="$1" # reportid
    local a2="$2" # comment
    local a3="$3" # charttitle
    local a4="$4" # subtitle
    local a5="$5" # $OUTPUTFILE
    local a6="$6" # $IMPORTANTFILE
    local a7="$7" # $duplicateday
    export nameanchor="$a1"
    local enabled="${a1}_enabled"
    eval enabled=\$$enabled
    local htmtfile="${a1}_template"
    eval htmtfile=\$$htmtfile
    local inshort="${a1}_inshort"
    eval inshort=\$$inshort
    if [ "$enabled" = "y" ] ; then
      $ECHO "$a2"
      logrunstep "$a2"
      export REPORTNO=`expr $REPORTNO + 1`
      export charttitle="$REPORTNO. $a3: $firstdate to $lastdate"
      export subtitle="(new domains in blue, watched files in red, new linkers in red, watched linkers in olive, cached files in pink, not found in gray)"
      rm -f $DATADIR/longtemp $DATADIR/shorttemp
      #export headlevel="h2"
      #$COMMANDPREFIX $EXPAND $CONFIGFILE $PROGRAMDIR/visitdetailhead.htmt >> $a5
      # generate long report into longtemp
      #  sllo and slhi are fields in hitslices table set up by logvisits, expanded by pvd
      #export printvisitdetail_qpvd="SELECT *, FROM_UNIXTIME(systime) AS stamp FROM hits INNER JOIN visits ON hits.vn = visits.visitno INNER JOIN wtretcodes ON hits.retcode = wtretcodes.code LEFT OUTER JOIN wtsuffixclass ON hits.filetype = wtsuffixclass.suf LEFT OUTER JOIN wtcolors ON hits.path REGEXP wtcolors.colfilename LEFT OUTER JOIN wtreferrercolor ON hits.referrerurl REGEXP wtreferrercolor.rcurl LEFT OUTER JOIN wtcumref ON hits.referrerurl = wtcumref.refurl LEFT OUTER JOIN wtcumdom ON hits.domain = wtcumdom.cdom WHERE vn >= %[sllo]% AND vn <= %[slhi]% AND wtretcodes.good != 0 ORDER BY vn, sn"
      local star="*"
      local x
      local z
      x=`$MYSQLRUN "SELECT qvalue FROM wtqueries WHERE qrpt='rpt_details' AND qname='qpvd'"`
      eval z=\"$x\"
      export printvisitdetail_qpvd="$z"
      if [ "$rpt_details_eventlogfile" != "" ] ; then
          #export printvisitdetail_qlog="SELECT logtime, logtext, FROM_UNIXTIME(logtime) AS logtimeformatted FROM wtlog WHERE logtime >= $firstdatebin AND logtime <= $lastdatebin"
          x=`$MYSQLRUN "SELECT qvalue FROM wtqueries WHERE qrpt='rpt_details' AND qname='qlog'"`
          eval z=\"$x\"
          #echo after eval printvisitdetail_qlog=...$z...
          export printvisitdetail_qlog="$z"
          # else no wtlog defined, this is OK
      fi
      # generate long report into longtemp
      export criteria="$rpt_details_longcriteria"
      export logcriteria="$rpt_details_longlogcriteria"
      export sufdetails="wtsuffixclass.sufdetailslong"
      $COMMANDPREFIX $PRINTVISITDETAIL -v -config $CONFIGFILE > $DATADIR/longtemp
      errorwas=$?
      if [ "$errorwas" != "0" ] ; then
	  echo 1>&2 "$0: **** failed: $PRINTVISITDETAIL -config $CONFIGFILE"
	  exit 127
      fi
      # generate short report into shorttemp -- same queries, different criteria for visit display
      export criteria="$rpt_details_shortcriteria"
      export logcriteria="$rpt_details_shortlogcriteria"
      export sufdetails="wtsuffixclass.sufdetailsshort"
      $COMMANDPREFIX $PRINTVISITDETAIL -config $CONFIGFILE > $DATADIR/shorttemp
      errorwas=$?
      if [ "$errorwas" != "0" ] ; then
	 echo 1>&2 "$0: **** failed: $PRINTVISITDETAIL -config $CONFIGFILE"
	 exit 127
      fi
      export longfile="$DATADIR/longtemp"
      export shortfile="$DATADIR/shorttemp"
      $COMMANDPREFIX $EXPAND $CONFIGFILE $PROGRAMDIR/$htmtfile >> $a5
      errorwas=$?
      if [ "$errorwas" != "0" ] ; then
	 echo 1>&2 "$0: **** failed: $EXPAND $CONFIGFILE $PROGRAMDIR/$htmtfile"
	 exit 127
      fi
    # if doing 7-day report, list the 7 most recent days important visits in reverse chrono order
      if [ "$rpt_day7_enabled" = "y" ] ; then
# ---- don't do this if duplicateday -------------------
	rm -f $IMPORTANT.7
	mv $IMPORTANT.6 $IMPORTANT.7
	mv $IMPORTANT.5 $IMPORTANT.6
	mv $IMPORTANT.4 $IMPORTANT.5
	mv $IMPORTANT.3 $IMPORTANT.4
	mv $IMPORTANT.2 $IMPORTANT.3
	mv $IMPORTANT.1 $IMPORTANT.2
# ---- don't do this if duplicateday -------------------
	# make sure all the files are there, otherwise the importantwrapper will exit on a missing file
	test -f $IMPORTANT.7 || touch $IMPORTANT.7
	test -f $IMPORTANT.6 || touch $IMPORTANT.6
	test -f $IMPORTANT.5 || touch $IMPORTANT.5
	test -f $IMPORTANT.4 || touch $IMPORTANT.4
	test -f $IMPORTANT.3 || touch $IMPORTANT.3
	test -f $IMPORTANT.2 || touch $IMPORTANT.2
	# set up H2 for 7day report section .. HEAD was written above
	$COMMANDPREFIX $EXPAND $CONFIGFILE $PROGRAMDIR/important7dayhead.htmt >> $a6
	# Use the temp file just made to include the H3, no report number
	export headlevel="h3"
	export charttitle="$firstdate to $lastdate"
	export incfile="$DATADIR/shorttemp"
	rm -f $IMPORTANT.1
	$COMMANDPREFIX $EXPAND $CONFIGFILE $PROGRAMDIR/visitdetailhead.htmt > $IMPORTANT.1
	# expand a wrapper that includes the last 7 reports into a 7 day report
	# .. more sections could be added to the important report
	$COMMANDPREFIX $EXPAND $CONFIGFILE $PROGRAMDIR/importantwrapper.htmt >> $a6
      fi
      $CLEANUP $DATADIR/shorttemp
      $CLEANUP $DATADIR/longtemp
    fi
}
#################################################################
### Update a cumulative table.
#   .. SQL statements to do this are obtained from the database.
#   .. because these are UPDATE/INSERT statements they may have long values and need to have STRICT turned off
updatetable()
{
    local a1="$1" # tableid
    local a2="$2" # $duplicateday
    if [ $a2 != "true" ] ; then
        local star="*"
	local x
	local z
	x=`$MYSQLRUN "SELECT qvalue FROM wtqueries WHERE qrpt='update_$a1' AND qname='up'"`
        eval z=\"$x\"
        $ECHO "Updating: $z"
        logrunstep "Update $a1"
	$COMMANDPREFIX $MYSQLRUN "SET SESSION sql_mode=''; $z"
	errorwas=$?
	if [ "$errorwas" != "0" ] ; then
	   echo 1>&2 "$0: **** failed: SET SESSION sql_mode=''; $MYSQLRUN $z"
	   exit 127
	fi
    else
	echo 1>&2 "$0: **** skipped due to duplicate day: $MYSQLRUN Update $a1"
    fi
}
#################################################################
### Trim a cumulative table.
#   .. SQL statements to do this are obtained from the database.
trimtable()
{
    local a1="$1" # tableid
    local a2="$2" # $duplicateday
    if [ $a2 != "true" ] ; then
        local star="*"
	local x
	local z
	x=`$MYSQLRUN "select qvalue from wtqueries where qrpt='trim_$a1' and qname='trim'"`
        eval z=\"$x\"
        $ECHO "Trimming: $z"
        logrunstep "Trim $a1"
	$COMMANDPREFIX $MYSQLRUN "$z"
	errorwas=$?
	if [ "$errorwas" != "0" ] ; then
	   echo 1>&2 "$0: **** failed: $MYSQLRUN $z"
	   exit 127
	fi
    else
	echo 1>&2 "$0: **** skipped due to duplicate day: $MYSQLRUN Trim $a1"
    fi
}
#################################################################
### Finish up the HTML files for output
tailrep()
{
    local a1="$1" # reportid
    local a2="$2" # comment
    local a3="$3" # $PROGRAMDIR/tail.htmt
    local a4="$4" # $OUTPUTFILE
    local a5="$5" # $PROGRAMDIR/importanttail.htmt
    local a6="$6" # $IMPORTANTFILE
    $ECHO $a2
    logrunstep "tailrep"
    $COMMANDPREFIX $EXPAND $CONFIGFILE $a3 >> $a4
    $COMMANDPREFIX $EXPAND $CONFIGFILE $a5 >> $a6
}
#################################################################
### Non-indexer paths through the website, visualized in GraphViz
# One day's data does not help much, have to accumulate multiple days
# Reset this database with init_wtcumpath.sql
pathrep()
{
    local a1="$1" # reportid
    local a2="$2" # comment
    local a3="$3" # title
    local a4="$4" # subtitle
    local a5="$5" # $PATHSFILE
    local a6="$6" # $DATADIR/temppath.sql
    local a7="$7" # $OUTPUTFILE
    local a8="$8" # $duplicateday
    export nameanchor="$a1"
    if [ "$rpt_paths_enabled" = "y" ] ; then
      if [ "$a5" != "" ] ; then
	  $ECHO "$a2"
	  export charttitle="$a3"
	  export subtitle="$a4"
	  rm -f $a6 $a5
	  $COMMANDPREFIX $EXPAND $CONFIGFILE $PROGRAMDIR/pathsql.htmt > $a6
	  if [ "$a8" != "true" ] ; then
	      $COMMANDPREFIX $MYSQLLOAD $a6
	      errorwas=$?
	      if [ "$errorwas" != "0" ] ; then
		 echo 1>&2 "$0: **** failed: $MYSQLLOAD $a6"
		 exit 127
	      fi
	  else
	      echo 1>&2 "$0: **** skipped due to duplicate day: $MYSQLLOAD $a6"
	  fi
	  $CLEANUP $a6
	  # cumulative data is loaded, generate input to dot.
	  # the trim limit should be a function of number of days.. when I have 30 days of data, maybe it should be aobut 10?
	  $COMMANDPREFIX $EXPAND $CONFIGFILE $PROGRAMDIR/paths1.htmt > $a5
	  #find a way to run GraphViz noninteractively
	  #  on OSX:  /Applications/Graphviz.app/Contents/MacOS/dot -Tps -Gsize="6,7" -o foo.ps paths.dot
	  #  on FreeBSD:
	  # ... then convert the ps into a gif using convert
	  # ... then expand a template into output that includes the graph
	  # ... and modify the cronjob to move the gif
      fi
    fi
}
#################################################################
### Finish up. 
# Load the values that the individual reports wanted to save.
# Delete any files and tables that we are supposed to.
finalcleanup ()
{
    cd $DATADIR
    # insert the final semicolon into the SQL commands file and execute it
    $ECHO "Loading wtsrhist.sql"
    echo ";" >> load_wtsrhist.sql
    $COMMANDPREFIX $MYSQLLOAD load_wtsrhist.sql
    errorwas=$?
    if [ "$errorwas" != "0" ] ; then
       echo 1>&2 "$0: **** warning: $MYSQLLOAD load_wtsrhist.sql, skipped load"
    fi
    $ECHO "Clean up tables"
    cat tablecleanupsql.tpt > $DATADIR/temp.sql
    $COMMANDPREFIX $MYSQLLOAD $DATADIR/temp.sql
    $ECHO "Clean up files"
    cat filecleanupsh.tpt > ./temp.sh
    . ./temp.sh
    $CLEANUP temp.sh
    logrunstep "finalcleanup"
}
##### end ####
#  Permission is hereby granted, free of charge, to any person obtaining
#  a copy of this software and associated documentation files (the
#  "Software"), to deal in the Software without restriction, including
#  without limitation the rights to use, copy, modify, merge, publish,
#  distribute, sublicense, and/or sell copies of the Software, and to
#  permit persons to whom the Software is furnished to do so, subject to
#  the following conditions:

#  The above copyright notice and this permission notice shall be included
#  in all copies or substantial portions of the Software.

#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
#  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
#  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
#  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 
